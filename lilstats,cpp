#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include "lilstats.h"

double median(std::vector <double> x, int y)
{
    std::vector <double> pool;
    for(int i = 0; i < y; i++)
    {
        pool.push_back(x[i]);
    }
    sort(pool.begin(), pool.end());
    if (y % 2 == 0)
    {
        return (pool[y/2 - 1] + pool[y/2])/2;
    }
    else
    {
        return pool[y/2];
    }
}

double mean(std::vector <double> x, int y)
{
    double sum;
    for(int i = 0; i < y; i++)
    {
        sum+= x[i];
    }
    return sum/y;
}

double avgdev(std::vector <double> x, int y, double b)
{
    double sum;
    for(int i = 0; i < y; i++)
    {
        sum+= abs(x[i] - b);
    }
    return sum/y;
}

double stdev(std::vector <double> x, int y, double b)
{
    double sum;
    for(int i = 0; i < y; i++)
    {
        sum+= pow(x[i] - b, 2);
    }
    return sqrt(sum/y);
}

double mdev(std::vector <double> x, int y, double b)
{
    std::vector <double> pool;
    for(int i = 0; i < y; i++)
    {
        pool.push_back(abs(x[i] - b));
    }
    return median(pool, y);
}

double percentile_nearest_rank(std::vector <double> x, int y, double b)
{
    std::vector <double> pool;
    for(int i = 0; i < y; i++)
    {
        pool.push_back(x[i]);
    }
    sort(pool.begin(), pool.end());
    int r = ceil(b/100 * y);
    if(b == 0)
    {
        return pool[0];
    }
    else
    {
        return pool[r-1];
    } 
}
